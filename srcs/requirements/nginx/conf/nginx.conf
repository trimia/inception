user nginx;

# Set number of worker processes automatically based on number of CPU cores.
worker_processes auto;
#??
pid /run/nginx.pid;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Configures default error logger.
error_log /var/log/nginx/error.log warn;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;

# Include files with config snippets into the root context.
include /etc/nginx/conf.d/*.conf;

events {
        # The maximum number of simultaneous connections that can be opened by
        # a worker process.
        worker_connections 1024;
}

http {
        # Includes mapping of file name extensions to MIME types of responses
        # and defines the default type.
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # Name servers used to resolve names of upstream servers into addresses.
        # It's also needed when using tcpsocket and udpsocket in Lua modules.
        #resolver 1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001;
        resolver 127.0.0.1; # Use a DNS resolver address (e.g., your local DNS server or 127.0.0.1)
        map $host $backend_host{
                default mmariani.42.fr;
        }

        # Don't tell nginx version to the clients. Default is 'on'.
        server_tokens off;

        # Specifies the maximum accepted body size of a client request, as
        # indicated by the request header Content-/Length. If the stated content
        # length is greater than this size, then the client receives the HTTP
        # error code 413. Set to 0 to disable. Default is '1m'.
        client_max_body_size 1m;

        # Sendfile copies data between one FD and other from within the kernel,
        # which is more efficient than read() + write(). Default is off.
        sendfile on;

        # Causes nginx to attempt to send its HTTP response head in one packet,
        # instead of using partial frames. Default is 'off'.
        tcp_nopush on;


        # Enables the specified protocols. Default is TLSv1 TLSv1.1 TLSv1.2.
        # TIP: If you're not obligated to support ancient clients, remove TLSv1.1.
        ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;

        # Path of the file with Diffie-Hellman parameters for EDH ciphers.
        # TIP: Generate with: `openssl dhparam -out /etc/ssl/nginx/dh2048.pem 2048`
        #ssl_dhparam /etc/ssl/nginx/dh2048.pem;

        # Specifies that our cipher suits should be preferred over client ciphers.
        # Default is 'off'.
        ssl_prefer_server_ciphers on;

        # Enables a shared SSL cache with size that can hold around 8000 sessions.
        # Default is 'none'.
        ssl_session_cache shared:SSL:2m;

        # Specifies a time during which a client may reuse the session parameters.
        # Default is '5m'.
        ssl_session_timeout 1h;

        # Disable TLS session tickets (they are insecure). Default is 'on'.
        ssl_session_tickets off;


        # Enable gzipping of responses.
        #gzip on;

        # Set the Vary HTTP header as defined in the RFC 2616. Default is 'off'.
        gzip_vary on;


        # Helper variable for proxying websockets.
        map $http_upgrade $connection_upgrade {
                default upgrade;
                '' close;
        }


        # Specifies the main log format.
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

        # Sets the path, format, and configuration for a buffered log write.
        access_log /var/log/nginx/access.log main;


        # Includes virtual hosts configs.
        include /etc/nginx/http.d/*.conf;

    #...
#    upstream  nginx {
#       server http://localhost:443;
#  }

        #    server {
        #listen      80;
        #server_name www.mmariani.42.fr mmariani.42.fr;
        #...

        #       location /upstream {
        #   proxy_pass                    https://mmariani.42.fr;
        #   proxy_ssl_certificate         /etc/nginx/mmariani.pem;
        #   proxy_ssl_certificate_key     /etc/nginx/mmariani.key;
        #   proxy_ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;
        #   proxy_ssl_ciphers             HIGH:!aNULL:!MD5;
        #   proxy_ssl_trusted_certificate /etc/nginx/trusted_ca_cert.crt;

        #   proxy_ssl_verify        on;
        #   proxy_ssl_verify_depth  2;
        #   proxy_ssl_session_reuse on;
        #}
        #}
        #server {

        #listen 80;
        #listen [::]:80;
        #server_name www.mcipolla.42.fr mcipolla.42.fr;
        #return 301 https://$host$request_uri;

        #}

    server {
      #listen      443;
        listen      443 ssl;
        #listen [::]:443 ssl;

        server_name mmariani.42.fr;

        ssl_certificate        /etc/nginx/ssl/mmariani.crt;
        ssl_certificate_key    /etc/nginx/ssl/mmariani.key;
        ssl_protocols           TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        root                    /www;
        index                   index.html index.htm;
        #        ssl_client_certificate /etc/ssl/certs/ca.crt;
        #ssl_verify_client      optional;
      	location / {
                        # proxy_pass https://127.0.0.1:443;
                        # proxy_set_header Host $host;
                        # proxy_bind $server_addr;
                        # proxy_pass http://localhost:443;


                        # proxy_pass http://$backend_host;
		        try_files $uri $uri/ /index.html;
	      }
        # location / {
        # #     proxy_pass https://mmariani.42.fr;
        #     proxy_pass http://127.0.0.1:443;
        # }

    }
}
